import React from "react";
interface IActionMovePrev {
    type: "movePrev";
    payload: {
        onReachStart: IProps["onReachStart"];
    };
}
interface IActionMoveNext {
    type: "moveNext";
    payload: {
        elementCount: number;
        onReachEnd: IProps["onReachEnd"];
    };
}
interface IActionSetGalleryWidth {
    type: "setGalleryWidth";
    payload: {
        galleryWidth: number;
        elementWidth: IProps["elementWidth"];
        fadeDistance: NonNullable<IProps["fadeDistance"]>;
        minPadding: NonNullable<IProps["minPadding"]>;
    };
}
declare const initialState: {
    galleryPosition: number;
    galleryWidth: number;
    useableWidth: number;
    elementsShown: number;
    excessSpace: number;
    paddingComponentWidth: number;
};
export declare type State = typeof initialState;
export declare type Action = IActionMovePrev | IActionMoveNext | IActionSetGalleryWidth;
export interface IProps {
    tiles: React.ReactNode[];
    elementWidth: number;
    fadeDistance?: number;
    minPadding?: number;
    onReachEnd?: (state?: State) => void;
    onReachStart?: (state?: State) => void;
}
declare const HorizontalGallery: React.FC<IProps>;
export default HorizontalGallery;
